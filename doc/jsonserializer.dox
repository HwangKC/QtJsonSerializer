/*!
@class QtJsonSerializer::JsonSerializer

This class is one of the modules core component. It performs the de/serialization of C++
classes from and to JSON.

@section json_supported Supported types
The serializer supports a bunch of types by default, but there are limitations. Check the main
page @ref qtjsonserializer_readme_label_4 "Usage Hints" for details about what is possible and
what is not.

@section json_extending Extending the serializer
To extend the serializers functionality, create a custom implementation of the
TypeConverter class. Check it's documentation for more details and an example on how to. Once
you've created a custom converter class, you can add it to a serializer instance by using
SerializerBase::addJsonTypeConverter.

@sa SerializerBase, CborSerializer
*/

/*!
@property QtJsonSerializer::JsonSerializer::byteArrayFormat

@default{`JsonSerializer::ByteArrayFormat::Base64`}

When de/serializing QByteArray data, it has to be converted to a string, as json does not
support binary data. This property controls the encoding for the serialization and
deserialization of such data. Check the enum for the different formats.

@accessors{
	@readAc{byteArrayFormat()}
	@writeAc{setByteArrayFormat()}
	@notifyAc{byteArrayFormatChanged()}
}

@sa JsonSerializer::validateBase64, JsonSerializer::ByteArrayFormat
*/

/*!
@property QtJsonSerializer::JsonSerializer::validateBase64

@default{`true`}

Applies to deserialization only.<br/>
If active, the date is checked first to verify it is actually a base64 encoded string. If thats not the case
an exception will be thrown. When disabled, invalid characters are silently discarded, so no error is reported

@accessors{
	@readAc{validateBase64()}
	@writeAc{setValidateBase64()}
	@notifyAc{validateBase64Changed()}
}

@sa JsonSerializer::byteArrayFormat
*/

/*!
@fn QtJsonSerializer::JsonSerializer::serialize(const QVariant &) const

@param data The data to be serialized
@returns The serialized value
@throws SerializationException Thrown if the serialization fails

@sa JsonSerializer::deserialize, JsonSerializer::serializeTo
*/

/*!
@fn QtJsonSerializer::JsonSerializer::serializeTo(QIODevice *, const QVariant &, QJsonDocument::JsonFormat) const

@param device The device to write the json to
@param data The data to be serialized
@param format The formatting for the generated json (compact or intended)
@throws SerializationException Thrown if the serialization fails

@sa JsonSerializer::deserializeFrom, JsonSerializer::serialize
*/

/*!
@fn QtJsonSerializer::JsonSerializer::serializeTo(const QVariant &, QJsonDocument::JsonFormat) const

@param data The data to be serialized
@param format The formatting for the generated json (compact or intended)
@returns The serialized data as byte array
@throws SerializationException Thrown if the serialization fails

@sa JsonSerializer::deserializeFrom, JsonSerializer::serialize
*/

/*!
@fn QtJsonSerializer::JsonSerializer::serialize(const T &) const
@tparam T The type of the data to be serialized
@copydetails JsonSerializer::serialize(const QVariant &) const
*/

/*!
@fn QtJsonSerializer::JsonSerializer::serializeTo(QIODevice *, const T &, QJsonDocument::JsonFormat) const
@tparam T The type of the data to be serialized
@copydetails JsonSerializer::serializeTo(QIODevice *, const QVariant &, QJsonDocument::JsonFormat) const
*/

/*!
@fn QtJsonSerializer::JsonSerializer::serializeTo(const T &, QJsonDocument::JsonFormat) const
@tparam T The type of the data to be serialized
@copydetails JsonSerializer::serializeTo(const QVariant &, QJsonDocument::JsonFormat) const
*/

/*!
@fn QtJsonSerializer::JsonSerializer::deserialize(const QJsonValue &, int, QObject*) const

@param json The data to be deserialized
@param metaTypeId The target type of the deserialization
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value, wrapped in QVariant
@throws DeserializationException Thrown if the deserialization fails

@sa JsonSerializer::serialize, JsonSerializer::deserializeFrom
*/

/*!
@fn QtJsonSerializer::JsonSerializer::deserializeFrom(QIODevice *, int, QObject*) const

@param device The device to read the json to be deserialized from
@param metaTypeId The target type of the deserialization
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value, wrapped in QVariant
@throws DeserializationException Thrown if the deserialization fails

@sa JsonSerializer::JsonSerializer::serializeTo, JsonSerializer::deserialize
*/

/*!
@fn QtJsonSerializer::JsonSerializer::deserializeFrom(const QByteArray &, int, QObject*) const

@param data The data to read the json to be deserialized from
@param metaTypeId The target type of the deserialization
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value, wrapped in QVariant
@throws DeserializationException Thrown if the deserialization fails

@sa JsonSerializer::serializeTo, JsonSerializer::deserialize
*/

/*!
@fn QtJsonSerializer::JsonSerializer::deserialize(const typename QtJsonSerializer::__private::json_type<T>::type &, QObject*) const

@tparam T The type of the data to be deserialized
@param json The data to be deserialized
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value
@throws DeserializationException Thrown if the deserialization fails

@sa JsonSerializer::serialize, JsonSerializer::deserializeFrom
*/

/*!
@fn QtJsonSerializer::JsonSerializer::deserializeFrom(QIODevice *, QObject*) const

@tparam T The type of the data to be deserialized
@param device The device to read the json to be deserialized from
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value
@throws DeserializationException Thrown if the deserialization fails

@sa JsonSerializer::serializeTo, JsonSerializer::deserialize
*/

/*!
@fn QtJsonSerializer::JsonSerializer::deserializeFrom(const QByteArray &, QObject*) const

@tparam T The type of the data to be deserialized
@param data The data to read the json to be deserialized from
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value
@throws DeserializationException Thrown if the deserialization fails

@sa JsonSerializer::serializeTo, JsonSerializer::deserialize
*/
