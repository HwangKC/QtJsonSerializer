/*!
@class QtJsonSerializer::CborSerializer

This class is one of the modules core component. It performs the de/serialization of C++
classes from and to CBOR.

@section cbor_supported Supported types
The serializer supports a bunch of types by default, but there are limitations. Check the main
page @ref qtjsonserializer_readme_label_4 "Usage Hints" for details about what is possible and
what is not.

@section cbor_extending Extending the serializer
To extend the serializers functionality, create a custom implementation of the
TypeConverter class. Check it's documentation for more details and an example on how to. Once
you've created a custom converter class, you can add it to a serializer instance by using
SerializerBase::addJsonTypeConverter.

@sa SerializerBase, JsonSerializer
*/

/*!
@property QtJsonSerializer::CborSerializer::handleSpecialNumbers

@default{`false`}

Applies to deserialization only.<br/>
The following table shows which tags are understood by the serializer and how they are
deserialized. The 'Checked' column indicates, if the data is tested to fit into the type before
deserialzing. If that's not the case, data can be lost without notice.

 Tag											| Types											| Checked
------------------------------------------------|-----------------------------------------------|---------
 QCborKnownTags::PositiveBignum					| q[u]int8 - q[u]int64 (depends on data size)	| yes
 QCborKnownTags::NegativeBignum					| qint8 - qint64 (depends on data size)			| yes
 QCborKnownTags::Decimal						| qreal											| no
 QCborKnownTags::Bigfloat						| qreal											| no
 CborSerializer::ExtendedTags::RationaleNumber	| qreal											| no

@warning Please note that those types have been explicitly created to allow encoding of
data that does not fit the standard integer or floating point types. The deserialization of
this class however will fail for data that does fit into such a type. If you truely need to
handle these types with their full capacity, create a custom converter instead of using this
property. It is only provided for convenience.

@accessors{
	@readAc{handleSpecialNumbers()}
	@writeAc{setHandleSpecialNumbers()}
	@notifyAc{handleSpecialNumbersChanged()}
}
*/

/*!
@fn QtJsonSerializer::CborSerializer::serialize(const QVariant &) const

@param data The data to be serialized
@returns The serialized value
@throws SerializationException Thrown if the serialization fails

@sa CborSerializer::deserialize, CborSerializer::serializeTo
*/

/*!
@fn QtJsonSerializer::CborSerializer::serializeTo(QIODevice *, const QVariant &, QCborValue::EncodingOptions) const

@param device The device to write the json to
@param data The data to be serialized
@param options The encoding options for the generated cbor
@throws SerializationException Thrown if the serialization fails

@sa CborSerializer::deserializeFrom, CborSerializer::serialize
*/

/*!
@fn QtJsonSerializer::CborSerializer::serializeTo(const QVariant &, QCborValue::EncodingOptions) const

@param data The data to be serialized
@param options The encoding options for the generated cbor
@returns The serialized data as byte array
@throws SerializationException Thrown if the serialization fails

@sa CborSerializer::deserializeFrom, CborSerializer::serialize
*/

/*!
@fn QtJsonSerializer::CborSerializer::serialize(const T &) const
@tparam T The type of the data to be serialized
@copydetails CborSerializer::serialize(const QVariant &) const
*/

/*!
@fn QtJsonSerializer::CborSerializer::serializeTo(QIODevice *, const T &, QCborValue::EncodingOptions) const
@tparam T The type of the data to be serialized
@copydetails CborSerializer::serializeTo(QIODevice *, const QVariant &, QCborValue::EncodingOptions) const
*/

/*!
@fn QtJsonSerializer::CborSerializer::serializeTo(const T &, QCborValue::EncodingOptions) const
@tparam T The type of the data to be serialized
@copydetails CborSerializer::serializeTo(const QVariant &, QCborValue::EncodingOptions) const
*/

/*!
@fn QtJsonSerializer::CborSerializer::deserialize(const QCborValue &, int, QObject*) const

@param cbor The data to be deserialized
@param metaTypeId The target type of the deserialization
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value, wrapped in QVariant
@throws DeserializationException Thrown if the deserialization fails

@sa CborSerializer::serialize, CborSerializer::deserializeFrom
*/

/*!
@fn QtJsonSerializer::CborSerializer::deserializeFrom(QIODevice *, int, QObject*) const

@param device The device to read the json to be deserialized from
@param metaTypeId The target type of the deserialization
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value, wrapped in QVariant
@throws DeserializationException Thrown if the deserialization fails

@sa CborSerializer::serializeTo, CborSerializer::deserialize
*/

/*!
@fn QtJsonSerializer::CborSerializer::deserializeFrom(const QByteArray &, int, QObject*) const

@param data The data to read the json to be deserialized from
@param metaTypeId The target type of the deserialization
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value, wrapped in QVariant
@throws DeserializationException Thrown if the deserialization fails

@sa CborSerializer::serializeTo, CborSerializer::deserialize
*/

/*!
@fn QtJsonSerializer::CborSerializer::deserialize(const QCborValue &, QObject*) const

@tparam T The type of the data to be deserialized
@param cbor The data to be deserialized
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value
@throws DeserializationException Thrown if the deserialization fails

@sa CborSerializer::serialize, CborSerializer::deserializeFrom
*/

/*!
@fn QtJsonSerializer::CborSerializer::deserializeFrom(QIODevice *, QObject*) const

@tparam T The type of the data to be deserialized
@param device The device to read the json to be deserialized from
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value
@throws DeserializationException Thrown if the deserialization fails

@sa CborSerializer::serializeTo, CborSerializer::deserialize
*/

/*!
@fn QtJsonSerializer::CborSerializer::deserializeFrom(const QByteArray &, QObject*) const

@tparam T The type of the data to be deserialized
@param data The data to read the json to be deserialized from
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value
@throws DeserializationException Thrown if the deserialization fails

@sa CborSerializer::serializeTo, CborSerializer::deserialize
*/
