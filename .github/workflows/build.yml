name: Build, test and upload the module

on: [push, check_run]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        version:
          - 5.13.2
        platform:
          - gcc_64
          - android_arm64_v8a
          - android_x86_64
          - android_armv7
          - android_x86
          - wasm_32
          - msvc2017_64
          - msvc2017
          - winrt_x64_msvc2017
          - winrt_x86_msvc2017
          - winrt_armv7_msvc2017
          - mingw73_64
          - mingw73_32
          - clang_64
          - ios

        include:
          - platform: gcc_64
            os: ubuntu-latest
          - platform: android_arm64_v8a
            os: ubuntu-latest
          - platform: android_x86_64
            os: ubuntu-latest
          - platform: android_armv7
            os: ubuntu-latest
          - platform: android_x86
            os: ubuntu-latest
          - platform: wasm_32
            os: ubuntu-latest
            emsdk: sdk-1.38.27-64bit
          - platform: msvc2017_64
            os: windows-latest
            vcarch: x64
          - platform: msvc2017
            os: windows-latest
            vcarch: x64_x86
          - platform: winrt_x64_msvc2017
            os: windows-latest
            vcarch: x64
          - platform: winrt_x86_msvc2017
            os: windows-latest
            vcarch: x64_x86
          - platform: winrt_armv7_msvc2017
            os: windows-latest
            vcarch: x64_arm
          - platform: mingw73_64
            os: windows-latest
          - platform: mingw73_32
            os: windows-latest
          - platform: clang_64
            os: macos-latest
          - platform: ios
            os: macos-latest

    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive
      - uses: actions/setup-python@v1
      - uses: mymindstorm/setup-emsdk@v1
        if: matrix.platform == 'wasm_32'
        with:
          version: ${{matrix.emsdk}}
      - uses: ilammy/msvc-dev-cmd@v1
        if: contains(matrix.platform, 'msvc')
        with:
          arch: ${{matrix.vcarch}}
          #toolset: 14.16
          uwp: ${{contains(matrix.platform, 'winrt')}}
      - uses: actions/cache@v1
        id: cache
        with:
          path: qt-cache
          key: qt-${{matrix.version}}-${{matrix.platform}}-test
      - uses: Skycoder42/action-setup-qt@master
        id: setup_qt
        with:
          version: ${{matrix.version}}
          platform: ${{matrix.platform}}
          install-args: --verbose
          cachedir: qt-cache
      - run: |
          mkdir ltest
          cd ltest
          echo '#include <QtCore/QtCore>' > main.cpp
          echo 'int main(int argc, char**argv) {' >> main.cpp
          echo 'QCoreApplication a{argc, argv};' >> main.cpp
          echo 'qDebug() << QCoreApplication::libraryPaths();' >> main.cpp
          echo 'return 0;' >> main.cpp
          echo '}' >> main.cpp
          qmake -project
          qmake
          make
          ./ltest || ./ltest.exe
          export QT_PLUGIN_PATH=$(qmake -query QT_INSTALL_PLUGINS)
          ./ltest || ./ltest.exe
      - name: qmake
        run: |
          qmake CONFIG+=install_ok QT_PLATFORM=${{matrix.platform}}
          make qmake_all
      - name: make module
        run: |
          make
          make INSTALL_ROOT="${{steps.setup_qt.outputs.installdir}}" install
      - name: make tests
        if: steps.setup_qt.outputs.tests == 'true'
        run: |
          make all
          make ${{steps.setup_qt.outputs.testflags}} run-tests
      - name: make examples
        if: matrix.platform == 'gcc_64'
        run: |
          make sub-examples
          cd examples && make INSTALL_ROOT="${{steps.setup_qt.outputs.installdir}}" install
      - name: make doc
        if: matrix.platform == 'gcc_64'
        run: |
          make doxygen
          cd doc && make INSTALL_ROOT="${{steps.setup_qt.outputs.installdir}}" install
      - uses: actions/upload-artifact@v1
        with:
          name: qtjsonserializer-${{matrix.platform}}-${{matrix.version}}
          path: install_link
      - uses: Skycoder42/action-upload-release@master
        if: startsWith(github.ref, 'refs/tags/')
        with:
          repo_token: ${{secrets.GITHUB_TOKEN}}
          directory: install_link
          asset_name: qtjsonserializer-${{matrix.platform}}-${{matrix.version}}
          tag: ${{github.ref}}
          overwrite: true
      - name: prepare qt for caching
        if: steps.cache.outputs.cache-hit != 'true'
        shell: python
        run: import shutil; shutil.copytree(r"${{steps.setup_qt.outputs.qtdir}}", "qt-cache", symlinks=True)

  build-no-converters:
    strategy:
      fail-fast: false
      matrix:
        version:
          - 5.13.2
        platform:
          - gcc_64
          - msvc2017_64
          - mingw73_64
          - clang_64

        include:
          - platform: gcc_64
            os: ubuntu-latest
          - platform: msvc2017_64
            os: windows-latest
            vcarch: x64
          - platform: mingw73_64
            os: windows-latest
          - platform: clang_64
            os: macos-latest

    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive
      - uses: actions/setup-python@v1
      - uses: ilammy/msvc-dev-cmd@v1
        if: contains(matrix.platform, 'msvc')
        with:
          arch: ${{matrix.vcarch}}
          #toolset: 14.16
      - uses: actions/cache@v1
        id: cache
        with:
          path: qt-cache
          key: qt-${{matrix.version}}-${{matrix.platform}}-test
      - uses: Skycoder42/action-setup-qt@master
        id: setup_qt
        with:
          version: ${{matrix.version}}
          platform: ${{matrix.platform}}
          install-args: --verbose
          cachedir: qt-cache
      - name: qmake
        run: |
          qmake CONFIG+=no_register_json_converters QT_PLATFORM=${{matrix.platform}}
          make qmake_all
      - name: make module
        run: make
      - name: prepare qt for caching
        if: steps.cache.outputs.cache-hit != 'true'
        shell: python
        run: import shutil; shutil.copytree(r"${{steps.setup_qt.outputs.qtdir}}", "qt-cache", symlinks=True)
